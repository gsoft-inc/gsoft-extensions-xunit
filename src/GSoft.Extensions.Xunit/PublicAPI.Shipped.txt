#nullable enable
GSoft.Extensions.DependencyInjection.DecorationServiceCollectionExtensions
GSoft.Extensions.Xunit.BaseIntegrationFixture
GSoft.Extensions.Xunit.BaseIntegrationFixture.BaseIntegrationFixture() -> void
GSoft.Extensions.Xunit.BaseIntegrationTest
GSoft.Extensions.Xunit.BaseIntegrationTest.BaseIntegrationTest(Xunit.Abstractions.ITestOutputHelper! testOutputHelper) -> void
GSoft.Extensions.Xunit.BaseIntegrationTest<TFixture>
GSoft.Extensions.Xunit.BaseIntegrationTest<TFixture>.BaseIntegrationTest(TFixture! fixture, Xunit.Abstractions.ITestOutputHelper! testOutputHelper) -> void
GSoft.Extensions.Xunit.BaseUnitFixture
GSoft.Extensions.Xunit.BaseUnitFixture.BaseUnitFixture() -> void
GSoft.Extensions.Xunit.BaseUnitFixture.Configuration.get -> Microsoft.Extensions.Configuration.IConfiguration!
GSoft.Extensions.Xunit.BaseUnitFixture.Dispose() -> void
GSoft.Extensions.Xunit.BaseUnitFixture.SetXunitOutput(Xunit.Abstractions.ITestOutputHelper! outputHelper) -> void
GSoft.Extensions.Xunit.BaseUnitTest
GSoft.Extensions.Xunit.BaseUnitTest.BaseUnitTest(Xunit.Abstractions.ITestOutputHelper! testOutputHelper) -> void
GSoft.Extensions.Xunit.BaseUnitTest<TFixture>
GSoft.Extensions.Xunit.BaseUnitTest<TFixture>.BaseUnitTest(TFixture! fixture, Xunit.Abstractions.ITestOutputHelper! testOutputHelper) -> void
GSoft.Extensions.Xunit.BaseUnitTest<TFixture>.Dispose() -> void
GSoft.Extensions.Xunit.BaseUnitTest<TFixture>.Fixture.get -> TFixture!
GSoft.Extensions.Xunit.BaseUnitTest<TFixture>.Logger.get -> Microsoft.Extensions.Logging.ILogger!
GSoft.Extensions.Xunit.EmptyIntegrationFixture
GSoft.Extensions.Xunit.EmptyIntegrationFixture.EmptyIntegrationFixture() -> void
GSoft.Extensions.Xunit.EmptyUnitFixture
GSoft.Extensions.Xunit.EmptyUnitFixture.EmptyUnitFixture() -> void
GSoft.Extensions.Xunit.IConfigureServiceCollection
GSoft.Extensions.Xunit.IConfigureServiceCollection.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
GSoft.Extensions.Xunit.IHasXUnitOutput
GSoft.Extensions.Xunit.IHasXUnitOutput.SetXunitOutput(Xunit.Abstractions.ITestOutputHelper! outputHelper) -> void
override GSoft.Extensions.Xunit.BaseIntegrationFixture.ConfigureConfiguration(Microsoft.Extensions.Configuration.IConfigurationBuilder! builder) -> Microsoft.Extensions.Configuration.IConfigurationBuilder!
override GSoft.Extensions.Xunit.BaseIntegrationFixture.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static GSoft.Extensions.DependencyInjection.DecorationServiceCollectionExtensions.DecorateWithSameLifetime<TService, TDecorator>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static GSoft.Extensions.DependencyInjection.DecorationServiceCollectionExtensions.DecorateWithSameLifetime<TService, TDecorator>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Func<System.IServiceProvider!, TService, TDecorator!>! decoratorFactory) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static GSoft.Extensions.DependencyInjection.DecorationServiceCollectionExtensions.DecorateWithSameLifetime<TService, TDecorator>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Func<TService, TDecorator!>! decoratorFactory) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static GSoft.Extensions.DependencyInjection.DecorationServiceCollectionExtensions.DecorateWithSameLifetime<TService>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Func<System.IServiceProvider!, TService!, TService!>! decoratorFactory) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static GSoft.Extensions.DependencyInjection.DecorationServiceCollectionExtensions.DecorateWithSameLifetime<TService>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Func<TService!, TService!>! decoratorFactory) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
virtual GSoft.Extensions.Xunit.BaseIntegrationFixture.Environment.get -> Microsoft.Extensions.Hosting.IHostEnvironment!
virtual GSoft.Extensions.Xunit.BaseUnitFixture.ConfigureConfiguration(Microsoft.Extensions.Configuration.IConfigurationBuilder! builder) -> Microsoft.Extensions.Configuration.IConfigurationBuilder!
virtual GSoft.Extensions.Xunit.BaseUnitFixture.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
virtual GSoft.Extensions.Xunit.BaseUnitFixture.Dispose(bool disposing) -> void
virtual GSoft.Extensions.Xunit.BaseUnitTest<TFixture>.Dispose(bool disposing) -> void
virtual GSoft.Extensions.Xunit.BaseUnitTest<TFixture>.Services.get -> System.IServiceProvider!